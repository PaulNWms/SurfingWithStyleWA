@page "/notes/msbuild"
<h1>MSBuild</h1>
<pre class="kaypro10">Links:
<a target="_blank" href="https://msdn.microsoft.com/en-us/library/dd576348.aspx">Walkthrough: Creating an MSBuild Project File from Scratch</a>
<a target="_blank" href="https://msdn.microsoft.com/en-us/library/bb629388.aspx">Common MSBuild Project Items</a>
<a target="_blank" href="https://msdn.microsoft.com/en-us/library/ms164313.aspx">MSBuild Well-known Item Metadata</a>
<a target="_blank" href="https://msdn.microsoft.com/en-us/library/7z253716.aspx">MSBuild Task Reference</a>
<a target="_blank" href="https://github.com/mikefourie/MSBuildExtensionPack">MSBuild Extension Pack</a>

Stare at this:

&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&gt;  
  &lt;PropertyGroup&gt;  
    &lt;AssemblyName&gt;MSBuildSample&lt;/AssemblyName&gt;  
    &lt;OutputPath&gt;Bin\&lt;/OutputPath&gt;  
  &lt;/PropertyGroup&gt;  
  &lt;ItemGroup&gt;  
    &lt;Compile Include="helloworld.cs" /&gt;
  &lt;/ItemGroup&gt;  
  &lt;Target Name="Build"&gt;  
    &lt;MakeDir Directories="$(OutputPath)" Condition="!Exists('$(OutputPath)')" /&gt;
    &lt;Csc Sources="@@(Compile)" OutputAssembly="$(OutputPath)$(AssemblyName).exe" /&gt;
  &lt;/Target&gt;  
  &lt;Target Name="Clean"&gt;  
    &lt;Delete Files="$(OutputPath)$(AssemblyName).exe" /&gt;
  &lt;/Target&gt;  
  &lt;Target Name="Rebuild" DependsOnTargets="Clean;Build" /&gt;
&lt;/Project&gt;  

&lt;!-- Targets can be called explicitly (uncommon) with the CallTarget task --&gt;
&lt;CallTarget Target="TargetA;TargetB" /&gt;

&lt;!-- Targets can have dependencies --&gt;
&lt;Target Name="TargetC" DependsOnTargets="TargetA;TargetB" /&gt;

&lt;!-- Invoking TargetC will then be followed by TargetB --&gt;
&lt;Target Name="TargetB" AfterTargets="TargetC" /&gt;

&lt;!-- Invoking TargetC will then be followed by TargetA --&gt;
&lt;Target Name="TargetA" BeforeTargets="TargetC" /&gt;

&lt;!-- Conditional invocation --&gt;
&lt;PropertyGroup&gt;
  &lt;DoIt&gt;true&lt;/DoIt&gt;
&lt;/PropertyGroup&gt;
&lt;Target Name="TargetC" Condition="$(DoIt)" /&gt;

&lt;!-- Typically .proj imports .targets, and .targets imports .props --&gt;
&lt;!-- Import .tasks where needed --&gt;
&lt;Import Project="Common.props" /&gt;

&lt;!-- The mother ship is --&gt;
&lt;Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" /&gt;

&lt;!-- Special targets defined in Microsoft.CSharp.targets --&gt;
&lt;Target Name="BeforeBuild" /&gt;
&lt;Target Name="AfterBuild" /&gt;

Stare at this:

&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;Project DefaultTargets="CrossJoin" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&gt;
  &lt;ItemGroup&gt;
    &lt;Locales Include="en;fr" /&gt;
    &lt;Files Include="A.md;B.md" /&gt;
  &lt;/ItemGroup&gt;

  &lt;Target Name="CrossJoin"&gt;
    &lt;ItemGroup&gt;
      &lt;OutputFiles Include="@@(Files)"&gt;
        &lt;Locale&gt;%(Locales.Identity)&lt;/Locale&gt;
      &lt;/OutputFiles&gt;
    &lt;/ItemGroup&gt;
    &lt;Message Text="%(OutputFiles.Locale)\%(OutputFiles.Identity)" /&gt;
  &lt;/Target&gt;
&lt;/Project&gt;

&lt;!-- Bring in custom task --&gt;
&lt;UsingTask AssemblyFile="file name" TaskName="task name" /&gt;

Custom tasks extend Task (recommended) or at implement ITask.

Consider using inline tasks.

&lt;!-- List of recursive files --&gt;
&lt;ItemGroup&gt;
  &lt;Compile Include=".\**\*.cs" /&gt;
&lt;/ItemGroup&gt;
</pre>
