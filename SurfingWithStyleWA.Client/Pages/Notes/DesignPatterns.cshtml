@page "/notes/designpatterns"

<h1>Design Patterns</h1>

<pre class="kaypro10">Links:
<a target="_blank" href="https://sourcemaking.com/design_patterns">Design patterns (and anti-patterns) site</a>

Abstract Factory
- Everyday usage: DbProviderFactory is an abstract base class for SqlClientFactory
- Everyday usage: SqlClientFactory.CreateCommand() creates instances of DbCommand
- A Factory represents a "family" of objects that it can create 
- Creational

Adapter
- Example: SQL data adapter
- Resolves incompatible interfaces
- Structural

Bridge
- Structural

Builder
-Creational

Chain of Responsibility
- Everyday usage: exception handling
- Message handling
- Behavioral

Command
- Behavioral

Composite
- Structural

Decorator (wrapper)
- Example: caching repository
- Attach additional responsibilities to an object (but use the same interface)
- Even sealed classes can be wrapped
- Structural

Dependency Injection (DI)

Façade
- Everyday usage: foreach
- Hides complexity
- Structural

Factory Method
- "Everyday" usage: IDbCommand.CreateParameter(), System.Windows.Forms.Control.CreateControlsInstance()
- A base class or interface defines the creation method
- Subclasses implement the creation method in different ways 
- Creational

Flyweight
- Structural

Interpreter
- Behavioral

Inversion of Control (IoC)

Iterator
- Everyday usage: foreach and IEnumerable&lt;T&gt;
- MoveNext() and Current
- yield return
- Behavioral

Mediator
- Behavioral

Memento
- Behavioral

MVC

MVP

MVVM

Observer
- Everyday usage: Event Handlers
- Everyday usage: IObservable&lt;T&gt; and IObserver&lt;T&gt;
- Publish/Subscribe relationship
- Behavioral

Prototype
- Creational

Proxy
- Everyday usage: SOAP Service Proxies
- Placeholder / Stand-in for actual object
- Structural

Repository

Simple Factory
- Everyday usage: System.Threading.Tasks.TaskFactory.Run() creates instances of Task
- Decides which concrete type to return
- Creational

Singleton
- Example: return (instance == null) ? new MyClass() : instance;
- Everyday usage: static
- Breaks Single Responsibility Principle
- Difficult to test
- Anti-pattern, better to use IoC container
- Creational

State
- Behavioral

Strategy
- Everyday usage: delegate parameter in method call
- Everyday usage: delegate parameter in constructor
- Behavioral

Template Method
- Behavioral

Visitor
- Behavioral
</pre>