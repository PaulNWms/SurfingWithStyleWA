@page "/tools/calculator"

<article class="narrow-article" itemprop="mainContentOfPage" itemscope itemtype="http://schema.org/WebApplication">
    @*@{Html.RenderPartial("~/Views/Shared/_StructuredData.cshtml", ViewBag as object);}*@
    <meta itemprop="applicationCategory" content="Tool, Multimedia" />
    <meta itemprop="applicationSubCategory" content="Math" />
    <meta itemprop="operatingSystem" content="IIS/ASP.NET MVC" />
    <h1 class="calculator-title" itemprop="name">Desktop Calculator</h1>
    <table class="calculator">
        <tr><td class="display" colspan="5"><input readonly bind="@display" /></td></tr>
        <tr>
            <td><button type="button" class="btn btn-default digit" onclick="@Backspace">←</button></td>
            <td><button type="button" class="btn btn-default correctError" onclick="@CorrectError">CE</button></td>
            <td><button type="button" class="btn btn-default clear" onclick="@Clear">C</button></td>
            <td><button type="button" class="btn btn-default negate" onclick="@Negate">±</button></td>
            <td><button type="button" class="btn btn-default sqrt" onclick="@SquareRoot">√</button></td>
        </tr>
        <tr>
            <td><button type="button" class="btn btn-default digit" onclick="@Digit7">7</button></td>
            <td><button type="button" class="btn btn-default digit" onclick="@Digit8">8</button></td>
            <td><button type="button" class="btn btn-default digit" onclick="@Digit9">9</button></td>
            <td><button type="button" class="btn btn-default binaryOp" onclick="@Divide">/</button></td>
            <td><button type="button" class="btn btn-default percent" onclick="@Percent">%</button></td>
        </tr>
        <tr>
            <td><button type="button" class="btn btn-default digit" onclick="@Digit4">4</button></td>
            <td><button type="button" class="btn btn-default digit" onclick="@Digit5">5</button></td>
            <td><button type="button" class="btn btn-default digit" onclick="@Digit6">6</button></td>
            <td><button type="button" class="btn btn-default binaryOp" onclick="@Multiply">*</button></td>
            <td><button type="button" class="btn btn-default invert" onclick="@Invert">1/x</button></td>
        </tr>
        <tr>
            <td><button type="button" class="btn btn-default digit" onclick="@Digit1">1</button></td>
            <td><button type="button" class="btn btn-default digit" onclick="@Digit2">2</button></td>
            <td><button type="button" class="btn btn-default digit" onclick="@Digit3">3</button></td>
            <td><button type="button" class="btn btn-default binaryOp" onclick="@Subtract">-</button></td>
            <td rowspan="2"><button type="button" class="btn btn-default equals" onclick="@Equals">=</button></td>
        </tr>
        <tr>
            <td colspan="2"><button type="button" class="btn btn-default digit zero" onclick="@Digit0">0</button></td>
            <td><button type="button" class="btn btn-default digit" onclick="@Point">.</button></td>
            <td><button type="button" class="btn btn-default binaryOp" onclick="@Add">+</button></td>
        </tr>
    </table>
    <p class="col-sm-offset-3" itemprop="description"><b>Disclaimer:</b> This calculator is for demonstration purposes only.</p>
</article>


@functions {
    enum FsmState { Number1, Number2display1, Number2, Equals };

    FsmState state;
    double value = 0.0;
    double oldValue = 0.0;
    double newValue = 0.0;
    char binaryOperator = ' ';

    string num1;
    string num2;
    string display;

    void Digit0() { Digit('0'); }
    void Digit1() { Digit('1'); }
    void Digit2() { Digit('2'); }
    void Digit3() { Digit('3'); }
    void Digit4() { Digit('4'); }
    void Digit5() { Digit('5'); }
    void Digit6() { Digit('6'); }
    void Digit7() { Digit('7'); }
    void Digit8() { Digit('8'); }
    void Digit9() { Digit('9'); }
    void Point()  { Digit('.'); }
    void Backspace() { Digit('\b'); }

    void Negate() { SetValue(-value); }
    void SquareRoot() { SetValue(Math.Sqrt(value)); }
    void Invert() { SetValue(1.0 / value); }
    void Percent() { SetValue(oldValue * value / 100.0); }

    void Divide() { BinaryOperator('/'); }
    void Multiply() { BinaryOperator('*'); }
    void Add() { BinaryOperator('+'); }
    void Subtract() { BinaryOperator('-'); }

    void CorrectError()
    {
        display = "0";
    }

    void Clear()
    {
        oldValue = newValue = 0;
        CorrectError();
        state = FsmState.Number1;
    }

    void Equals()
    {
        if (state == FsmState.Number2)
        {
            newValue = value;
        }

        switch (binaryOperator)
        {
            case '+':
                SetValue(oldValue + newValue);
                break;
            case '-':
                SetValue(oldValue - newValue);
                break;
            case '*':
                SetValue(oldValue * newValue);
                break;
            case '/':
                SetValue(oldValue / newValue);
                break;
        }

        oldValue = value;
        state = FsmState.Equals;
    }

    void SetValue(double number)
    {
        value = number;
        display = value.ToString();
    }

    void BinaryOperator(char op)
    {
        binaryOperator = op;
        oldValue = value;
        value = 0.0;
        state = FsmState.Number2display1;
    }

    void Digit(char c) {
        switch (state)
        {
            case FsmState.Number2display1:
            case FsmState.Equals:
                SetValue(0);
                state = FsmState.Number2;
                break;
            default:
                break;
        }

        ParseAndFormat(c);
    }

    void ParseAndFormat(char c)
    {
        // backspace
        if (c == '\b')
        {
            if (display.Length > 1)
            {
                display = display.Substring(0, display.Length - 1);
            }
            else
            {
                display = "0";
            }
        }
        else
        {
            display += c;
        }

        value = Double.Parse(display);
        display = value.ToString();

        if (c == '.')
        {
            bool isInteger = value % 1 == 0;

            if (isInteger)
            {
                display += '.';
            }
        }
    }
}