@page "/tools/timer"
@implements IDisposable

<article class="narrow-article timer" itemprop="mainContentOfPage" itemscope itemtype="http://schema.org/WebApplication">
    @*@{Html.RenderPartial("~/Views/Shared/_StructuredData.cshtml", ViewBag as object);}*@
    <meta itemprop="applicationCategory" content="Tool, Multimedia" />
    <meta itemprop="applicationSubCategory" content="Time Management" />
    <meta itemprop="operatingSystem" content="IIS/ASP.NET MVC" />
    <h2 itemprop="name">Timer</h2>
    <div class="jumbotron text-center">
        <h1>
            <span class="display">@timerDisplay</span>
        </h1>
        <button type="button" class="btn btn-primary btn-lg start" onclick="@SetTimer"><span class="oi @buttonFace"></span></button>&nbsp;
    </div>
    <div class="offset-md-4 col-md-6 hidden-xs hidden-sm form-horizontal">
        <div class="form-group row">
            <label class="col-sm-2" for="FormattedDuration">Duration</label>
            <input class="col-sm-2 form-control duration-minutes"
                   id="FormattedDuration"
                   name="FormattedDuration"
                   type="text"
                   value="@formattedDuration" />
        </div>
        <div class="form-group">
            <span class="field-validation-valid" data-valmsg-for="FormattedDuration" data-valmsg-replace="true"></span>
        </div>
    </div>
    <p class="offset-md-4 col-md-6 hidden-xs">Enter the timer duration, or choose one of the presets.</p>
    <div class="btn-group btn-group-toggle" data-toggle="buttons">
        <button class="btn btn-secondary" onclick="@Min1">1 min.</button>
        <button class="btn btn-secondary" onclick="@Min2">2 min.</button>
        <button class="btn btn-secondary" onclick="@Min3">3 min.</button>
        <button class="btn btn-secondary" onclick="@Min5">5 min.</button>
        <button class="btn btn-secondary" onclick="@Min10">10 min.</button>
        <button class="btn btn-secondary" onclick="@Min15">15 min.</button>
        <button class="btn btn-secondary" onclick="@Min20">20 min.</button>
        <button class="btn btn-secondary active" onclick="@Min25">25 min.</button>
        <button class="btn btn-secondary" onclick="@Min30">30 min.</button>
        <button class="btn btn-secondary" onclick="@Min45">45 min.</button>
        <button class="btn btn-secondary" onclick="@Min60">1 hour</button>
    </div>
</article>

<audio class="bell" preload="auto">
    <source src="audio/EndRoutine.wav" type="audio/wav">
    <source src="audio/EndRoutine.mp3" type="audio/mp3">
</audio>

@functions {
enum TimerState { stopped, running, paused };

TimerState timerStatus = TimerState.stopped;
TimeSpan duration = new TimeSpan(0, 25, 0);
TimeSpan oneSecond = new TimeSpan(0, 0, 1);
string timerDisplay = "25:00";
string formattedDuration = "25";
System.Timers.Timer timer = new System.Timers.Timer(1000);
string buttonFace = "oi-media-play";

void Min1() { UsePreset("1-minute-timer", 1); }
void Min2() { UsePreset("2-minute-timer", 2); }
void Min3() { UsePreset("egg-timer", 3); }
void Min5() { UsePreset("5-minute-timer", 5); }
void Min10() { UsePreset("10-minute-timer", 10); }
void Min15() { UsePreset("15-minute-timer", 15); }
void Min20() { UsePreset("20-minute-timer", 20); }
void Min25() { UsePreset("tomato-timer", 25); }
void Min30() { UsePreset("30-minute-timer", 30); }
void Min45() { UsePreset("45-minute-timer", 45); }
void Min60() { UsePreset("1-hour-timer", 60); }

void UpdateButton(TimerState state)
{
    timerStatus = state;
    switch (timerStatus)
    {
        case TimerState.stopped:
        case TimerState.paused:
            buttonFace = "oi-media-play";
            break;

        case TimerState.running:
            buttonFace = "oi-media-pause";
            break;
    }
}

string LTrimDuration(TimeSpan span)
{
    string str = span.ToString();
    int length = str.Length;
    int i = 0;

    for (i = 0; i < length - 4; i++)
    {
        if (str[i] != '0' && str[i] != ':')
            break;
    }

    return str.Substring(i);
}

void UsePreset(string url, int minutes)
{
    duration = new TimeSpan(0, minutes, 0);
    formattedDuration = minutes.ToString();
    timerDisplay = LTrimDuration(duration);
    UpdateButton(TimerState.stopped);
    timer.Stop();
}

void OnTimer(Object source, System.Timers.ElapsedEventArgs e)
{
    duration = duration.Subtract(oneSecond);
    timerDisplay = LTrimDuration(duration);
    JSRuntime.Current.InvokeAsync<object>("setTitle", timerDisplay);

    if (duration.TotalSeconds <= 0)
    {
        TimerExpired();
    }

    this.StateHasChanged();
}

void TimerExpired()
{
    JSRuntime.Current.InvokeAsync<object>("colorBody");
    JSRuntime.Current.InvokeAsync<object>("playBell");
    UpdateButton(TimerState.stopped);
    timer.Stop();
}

void SetTimer()
{
    switch (timerStatus)
    {
        case TimerState.stopped:
            JSRuntime.Current.InvokeAsync<object>("uncolorBody");
            UpdateButton(TimerState.running);
            timer.Start();
            break;

        case TimerState.running:
            UpdateButton(TimerState.paused);
            timer.Stop();
            break;

        case TimerState.paused:
            UpdateButton(TimerState.running);
            timer.Start();
            break;
    }
}

protected override void OnInit()
{
    timer.Elapsed += OnTimer;
}

public void Dispose()
{
    timer.Elapsed -= OnTimer;
}
}