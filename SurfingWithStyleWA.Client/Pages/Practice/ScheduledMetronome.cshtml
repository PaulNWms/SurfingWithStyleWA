@page "/practice/scheduledmetronome"
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

<style>
    .pendulum-parent {
        animation: @metronome.Animation @metronome.Duration ease-in-out alternate infinite;
    }
</style>
<article class="narrow-article mini-metronome" itemprop="mainContentOfPage" itemscope itemtype="http://schema.org/WebApplication">
    @*@{Html.RenderPartial("~/Views/Shared/_StructuredData.cshtml", ViewBag as object);}*@
    <meta itemprop="applicationCategory" content="Tool, Multimedia" />
    <meta itemprop="applicationSubCategory" content="Music Rehearsal" />
    <meta itemprop="operatingSystem" content="IIS/ASP.NET MVC" />
    <h2>Scheduled Metronome</h2>
    <div class="row">
        <div class="col-9 jumbotron text-center">
            <div class="row">
                <button class="offset-3 btn btn-primary btn-lg start" type="button" onclick="@schedule.OnStartPause"><span class="oi @eggTimer.ButtonFace"></span></button>
                <h1 class="offset-1 display"><span class="display">@metronome.TempoDisplay</span></h1>
            </div>
            <br />
            <div class="row">
                <h2 class="col-3">
                    <span class="timer-display">@eggTimer.TimerDisplay</span>
                </h2>
                <h2 class="col-9">
                    <span class="exercise-display">@schedule.ExerciseDisplay</span>
                </h2>
            </div>
        </div>
        <div class="offset-1 col-offset2">
            <div class="metronome-object">
                <div class="pendulum-crossbar">
                    <div class="pendulum-grandparent">
                        <div class="pendulum-parent">
                            <div class="pendulum-child"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <h3 class="offset-2">Schedule:</h3>
    </div>
    <div class="row">
        <table class="table offset-2 col-7">
            <thead>
                <tr>
                    <th></th>
                    <th>Tempo</th>
                    <th>Time</th>
                    <th>Exercise</th>
                    <th></th>
                </tr>
            </thead>
            <tbody class="schedule">
                @((MarkupString)schedule.ExerciseMarkup)
            </tbody>
        </table>
        <div class="row form-group offset-2 col-7">
            <label for="Rest">Rest between exercises (sec.): </label>
            <input name="Rest" class="form-control digit-filter rest" id="rest" type="text" value="@schedule.Rest"
                   style="width:3em;margin-top:0.2em;padding-left:0.3em;padding-right:0.3em;">
        </div>
        <div class="row form-group offset-2 col-7">
            <label for="StartRoutineWithRest">Start routine with a rest: </label>
            <input name="StartRoutineWithRest" class="start-with-rest" id="StartRoutineWithRest" type="checkbox" bind="@schedule.StartWithRest" />
        </div>
        <div class="row form-group offset-2 col-7">
            <label for="EndExerciseWithBell">End each exercise with a bell: </label>
            <input name="EndExerciseWithBell" class="end-with-bell" id="EndExerciseWithBell" type="checkbox" bind="@schedule.EndWithBell" />
        </div>
        <div class="row offset-2 col-7">
            <div class="form-group">
                 <button class="btn btn-primary btn-lg active" onclick="@schedule.CreateLink">Create Link</button>
            </div>
        </div>
    </div>
    <div class="row">
        <audio class="audio-click" preload="auto" hidden="hidden">
            <source src="audio/downbeatClick.wav" type="audio/wav">
            <source src="audio/downbeatClick.mp3" type="audio/mp3">
        </audio>
        <audio class="audio-end-exercise" preload="auto">
            <source src="audio/EndExercise.wav" type="audio/wav">
            <source src="audio/EndExercise.mp3" type="audio/mp3">
        </audio>
        <audio class="audio-end-routine" preload="auto">
            <source src="audio/EndRoutine.wav" type="audio/wav">
            <source src="audio/EndRoutine.mp3" type="audio/mp3">
        </audio>
    </div>
</article>

@functions {
    bool initialized;
    Schedule schedule;
    Metronome metronome;
    EggTimer eggTimer;

    protected override void OnInit()
    {
        base.OnInit();

        Uri uri = new Uri(UriHelper.GetAbsoluteUri());
        schedule = new Schedule(uri);
        eggTimer = new EggTimer();
        metronome = new Metronome();
        schedule.Initialize(eggTimer, metronome);
        eggTimer.Initialize(schedule, metronome);
        metronome.Initialize(eggTimer);
        schedule.ExerciseMarkup = schedule.ToHtml();
        schedule.timeline = schedule.ToTimeline();
        EggTimer.StateHasChanged =  this.StateHasChanged;
    }

    protected override void OnAfterRender()
    {
        base.OnAfterRender();

        if (!initialized)
        {
            JSRuntime.Current.InvokeAsync<object>("registerListener", ".audio-click");
            string newRow = string.Format(Schedule.HTML_TEMPLATE, 120, "2:00", string.Empty);
            JSRuntime.Current.InvokeAsync<object>("registerFormRowListener", newRow);
            initialized = true;
        }
    }

    class EggTimer
    {
        public static Action StateHasChanged;
        public string ButtonFace = "oi-media-play";

        public TimeSpan duration = new TimeSpan(0, 2, 0);
        private Schedule schedule;
        private Metronome metronome;
        public DateTime targetTime = DateTime.Now;
        public string TimerDisplay = "2:00";
        System.Timers.Timer timer = new System.Timers.Timer(1000);

        private bool _isRunning = false;
        public bool IsRunning
        {
            get
            {
                return _isRunning;
            }
            set
            {
                _isRunning = value;

                if (_isRunning)
                {
                    this.ButtonFace = "oi-media-pause";
                    Start();
                }
                else
                {
                    this.ButtonFace = "oi-media-play";
                    timer.Stop();
                }
            }
        }

        public void Initialize(Schedule schedule, Metronome metronome)
        {
            this.schedule = schedule;
            this.metronome = metronome;
            timer.Elapsed += OnTimer;
        }

        private string RoundAndTrimDuration(TimeSpan span)
        {
            const double factor = 10000000;
            long boundedTicks = Math.Max(span.Ticks, 0);
            long roundedTicks = (long)(Math.Round(boundedTicks / factor) * factor);
            TimeSpan roundedTimeSpan = new TimeSpan(roundedTicks);
            string str = roundedTimeSpan.ToString();
            int i = 0;

            for (i = 0; i < str.Length - 4; i++)
            {
                if (str[i] != '0' && str[i] != ':')
                    break;
            }

            return str.Substring(i);
        }

        private void Start()
        {
            this.targetTime = DateTime.Now + duration;
            JSRuntime.Current.InvokeAsync<object>("uncolorBody");
            this.TimerDisplay = RoundAndTrimDuration(duration);
            timer.Start();
        }

        void OnTimer(Object source, System.Timers.ElapsedEventArgs e)
        {
            duration = targetTime - e.SignalTime;
            this.TimerDisplay = RoundAndTrimDuration(duration);
            JSRuntime.Current.InvokeAsync<object>("setTitle", this.TimerDisplay);
            schedule.Update();

            if (this.TimerDisplay == "0:00")
            {
                TimerExpired();
            }

            EggTimer.StateHasChanged();
        }

        public void TimerExpired()
        {
            targetTime = DateTime.Now;
            timer.Stop();
            schedule.LineCompleted();
        }

        public void Dispose()
        {
            timer.Elapsed -= OnTimer;
        }
    }

    class Schedule
    {
        private enum TimerState { Stopped, Running, Paused, StartNext, Settling };

        public TimeSpan Rest;
        public bool StartWithRest;
        public bool EndWithBell;
        public string ExerciseMarkup;
        public List<Exercise> timeline;
        public Exercise CurrentStep;
        public Exercise LastStep;
        public string ExerciseDisplay;

        private TimerState status = TimerState.Stopped;
        private Uri uri;
        private EggTimer eggTimer;
        private Metronome metronome;
        private List<Exercise> exercises;

        public Schedule(Uri uri)
        {
            this.uri = uri;
            this.Rest = new TimeSpan(0, 0, 5);
            this.StartWithRest = true;
            this.EndWithBell = true;
            ParseUrl();
        }

        public void Initialize(EggTimer eggTimer, Metronome metronome)
        {
            this.eggTimer = eggTimer;
            this.metronome = metronome;
        }

        public void OnStartPause()
        {
            Update();
        }

        public async void CreateLink()
        {
            try
            {
                await ParseControls();
                string url = ToUrl();
                await JSRuntime.Current.InvokeAsync<object>("window.open", url);
            }
            catch (Exception e)
            {
                await JSRuntime.Current.InvokeAsync<object>("alert", e.Message + e.StackTrace);
            }
        }

        public async void Update()
        {
            switch (status)
            {
                case TimerState.Stopped:
                    if (timeline.Count == 0)
                    {
                        this.timeline = this.ToTimeline();

                        if (timeline.Count == 0)
                        {
                            return;
                        }
                    }

                    this.status = TimerState.StartNext;
                    Update();
                    break;

                case TimerState.StartNext:
                    this.LastStep = this.CurrentStep;
                    this.CurrentStep = timeline[0];
                    timeline.RemoveAt(0);
                    this.ExerciseDisplay = this.CurrentStep.Description;
                    this.metronome.Tempo = this.CurrentStep.Tempo;
                    this.eggTimer.duration = this.CurrentStep.Duration;
                    this.eggTimer.IsRunning = true;
                    this.metronome.IsRunning = true;
                    this.status = TimerState.Running;
                    break;

                case TimerState.Settling:
                    this.status = TimerState.Running;
                    break;

                case TimerState.Paused:
                    break;

                case TimerState.Running:
                    break;
            }
        }

        public void LineCompleted()
        {
            if (timeline.Count > 0)
            {
                if (this.EndWithBell && CurrentStep.Tempo != -1)
                {
                    JSRuntime.Current.InvokeAsync<object>("playAudio", ".audio-end-exercise");
                }

                status = TimerState.StartNext;
                Update();
            }
            else
            {
                if (this.EndWithBell)
                {
                    JSRuntime.Current.InvokeAsync<object>("playAudio", ".audio-end-routine");
                }

                metronome.IsRunning = false;
                JSRuntime.Current.InvokeAsync<object>("colorBody");
                this.ExerciseDisplay = "Done!";
            }
        }

        public async Task ParseControls()
        {
            var regex = new System.Text.RegularExpressions.Regex(@"(\d+):(\d\d)");
            exercises = new List<Exercise>();
            List<List<string>> raw = await JSRuntime.Current.InvokeAsync<List<List<string>>>("getExerciselValues");

            if (raw[0].Count != raw[1].Count || raw[1].Count != raw[2].Count)
            {
                throw new DataMisalignedException(string.Format("Lists are different lengths: {0} {1} {2}", raw[0].Count, raw[1].Count, raw[3].Count));
            }

            for (int i = 0; i < raw[0].Count; i++)
            {
                int tempo;
                int minutes;
                int seconds;
                TimeSpan duration;

                if (int.TryParse(raw[0][i], out tempo))
                {
                    System.Text.RegularExpressions.Match match = regex.Match(raw[1][i]);

                    if (match.Success)
                    {
                        minutes = int.Parse(match.Groups[1].Value);
                        seconds = int.Parse(match.Groups[2].Value);
                        duration = new TimeSpan(0, minutes, seconds);
                    }
                    else if (int.TryParse(raw[1][i], out seconds))
                    {
                        duration = new TimeSpan(0, 0, seconds);
                    }
                }

                if (duration.Ticks == 0)
                {
                    throw new ArgumentException(string.Format("Invalid time format: {0}", raw[1][i]));
                }

                exercises.Add(new Exercise() { Tempo = tempo, Duration = duration, Description = raw[2][i] });
            }
        }

        private void ParseUrl()
        {
            var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(this.uri.Query);
            int[] tempos = null;
            TimeSpan[] durations = null;
            string[] exes = null;
            exercises = new List<Exercise>();

            if (query.ContainsKey("r"))
            {
                foreach (var key in query.Keys)
                {
                    switch (key)
                    {
                        case "r":
                            {
                                int rest;
                                if (int.TryParse(query["r"].ToString(), out rest))
                                {
                                    this.Rest = new TimeSpan(0, 0, rest);
                                }
                            }
                            break;

                        case "s":
                            bool.TryParse(query["s"].ToString(), out this.StartWithRest);
                            break;

                        case "b":
                            bool.TryParse(query["b"].ToString(), out this.EndWithBell);
                            break;

                        case "t":
                            {
                                string[] strs = query["t"].ToString().Split('-');
                                List<int> ts = new List<int>(strs.Length);

                                foreach (string str in strs)
                                {
                                    int tempo;

                                    if (int.TryParse(str, out tempo))
                                    {
                                        ts.Add(tempo);
                                    }
                                    else
                                    {
                                        ts.Add(120);
                                    }
                                }

                                tempos = ts.ToArray();
                            }
                            break;

                        case "d":
                            {
                                string[] strs = query["d"].ToString().Split('-');
                                List<TimeSpan> durs = new List<TimeSpan>(strs.Length);

                                foreach (string str in strs)
                                {
                                    int sec;

                                    if (int.TryParse(str, out sec))
                                    {
                                        durs.Add(new TimeSpan(0, 0, sec));
                                    }
                                    else
                                    {
                                        durs.Add(new TimeSpan(0, 0, 120));
                                    }
                                }

                                durations = durs.ToArray();
                            }
                            break;

                        case "e":
                            exes = query["e"].ToString().Split('-');
                            break;
                    }
                }

                for (int i = 0; i < tempos.Length; i++)
                {
                    this.exercises.Add(new Exercise() { Tempo = tempos[i], Duration = durations[i], Description = exes[i] });
                }
            }
            else
            {
                this.exercises.Add(new Exercise() { Tempo = 120, Duration = new TimeSpan(0, 2, 0), Description = string.Empty });
            }
        }

        public List<Exercise> ToTimeline()
        {
            List<Exercise> timeline = new List<Exercise>();
            var restStep = new Exercise() { Tempo = -1, Duration = this.Rest, Description = "Resting..." };

            if (exercises.Count > 0 && this.Rest.Ticks > 0 && this.StartWithRest)
            {
                timeline.Add(restStep);
            }

            for (var i = 0; i < exercises.Count; i++)
            {
                timeline.Add(exercises[i]);

                if (i < exercises.Count - 1 && this.Rest.Ticks > 0)
                {
                    timeline.Add(restStep);
                }
            }

            return timeline;
        }

        public string ToUrl()
        {
            List<int> tempos = new List<int>(exercises.Count);
            List<TimeSpan> durations = new List<TimeSpan>(exercises.Count);
            List<string> descriptions = new List<string>(exercises.Count);

            foreach (var exercise in exercises)
            {
                tempos.Add(exercise.Tempo);
                durations.Add(exercise.Duration);
                descriptions.Add(exercise.Description);
            }

            string ts = string.Join("-", tempos);
            string ds = string.Join("-", durations.Select(d => (int)d.TotalSeconds));
            string es = string.Join("-", descriptions.Select(e => Uri.EscapeUriString(e)));
            return String.Format(URL_TEMPLATE, uri.AbsolutePath,
                this.Rest,
                this.StartWithRest.ToString().ToLower(),
                this.EndWithBell.ToString().ToLower(),
                ts, ds, es);
        }

        public string ToHtml()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            foreach (var exercise in exercises)
            {
                sb.AppendLine(string.Format(HTML_TEMPLATE,
                    exercise.Tempo,
                    exercise.Duration.ToString(@"m\:ss"),
                    exercise.Description));
            }

            return sb.ToString();
        }

        const string URL_TEMPLATE = "{0}?r={1}&s={2}&b={3}&t={4}&d={5}&e={6}";

        public const string HTML_TEMPLATE = @"                        <tr>
                    <td>
                        <button type='button' class='btn btn-primary delete-form-row' style='margin-top:0.2em;margin-right:0.2em'><span class='oi oi-x'></span></button>
                    </td>
                    <td>
                        <input type='text' style='width:3em;margin-top:0.2em;margin-right:0.2em;padding-left:0.3em;padding-right:0.3em' class='form-control digit-filter tempo tempo-0' id='tempo-0' placeholder='Tempo' autocomplete='off' value='{0}' />
                    </td>
                    <td>
                        <input type='text' style='width:3.5em;margin-top:0.2em;margin-right:0.2em;padding-left:0.5em;padding-right:0.5em' class='form-control time-filter midpoint-0' id='midpoint-0' placeholder='Duration' autocomplete='off' value='{1}' />
                        <input type='hidden'class='midpoint-0-sec' />
                    </td>
                    <td>
                        <input type='text' style='margin-top:0.2em;margin-right:0.2em' class='form-control exercise' id='exercise' placeholder='Exercise' value='{2}' />
                    </td>
                    <td>
                        <button type='button' class='btn btn-primary add-form-row' style='margin-top:0.2em' onclick='@AddRow'><span class='oi oi-plus'></span></button>
                    </td>
                </tr>";
    }

    class Metronome
    {
        const int MIN_TEMPO = 20;
        const int MAX_TEMPO = 240;

        public string Animation = "none";
        public string Duration = "500ms";
        private EggTimer eggTimer;

        private int _tempo = 120;
        public int Tempo
        {
            get
            {
                return _tempo;
            }
            set
            {
                _tempo = value;

                if (_tempo < MIN_TEMPO)
                {
                    IsRunning = false;
                    Duration = "0s";
                }
                else
                    Duration = ((int)(60000.0 / _tempo)).ToString() + "ms";

                SetAnimation();
            }
        }

        public string TempoDisplay
        {
            get
            {
                return (_tempo >= 0) ? _tempo.ToString() : "";
            }
        }

        private bool _isRunning = false;
        public bool IsRunning
        {
            get
            {
                return _isRunning;
            }
            set
            {
                _isRunning = value;

                if (Tempo < MIN_TEMPO)
                {
                    _isRunning = false;
                }

                SetAnimation();
            }
        }

        public void Initialize(EggTimer eggTimer)
        {
            this.eggTimer = eggTimer;
        }

        void DecrementTempo() { Tempo = Math.Max(Tempo - 1, MIN_TEMPO); }
        void IncrementTempo() { Tempo = Math.Min(Tempo + 1, MAX_TEMPO); }

        public void SetAnimation()
        {
            if (this.IsRunning)
            {
                if (Animation == "swing0")
                    Animation = "swing1";
                else
                    Animation = "swing0";
            }
            else
            {
                Animation = "none";
            }
        }
    }

    struct Exercise
    {
        public int Tempo;
        public TimeSpan Duration;
        public string Description;
    }
}
