@page "/practice/scheduledmetronome"
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

<style>
    .pendulum-parent {
        animation: @animation @duration ease-in-out alternate infinite;
    }
</style>
<article class="narrow-article mini-metronome" itemprop="mainContentOfPage" itemscope itemtype="http://schema.org/WebApplication">
    @*@{Html.RenderPartial("~/Views/Shared/_StructuredData.cshtml", ViewBag as object);}*@
    <meta itemprop="applicationCategory" content="Tool, Multimedia" />
    <meta itemprop="applicationSubCategory" content="Music Rehearsal" />
    <meta itemprop="operatingSystem" content="IIS/ASP.NET MVC" />
    <h2>Scheduled Metronome</h2>
    <div class="row">
        <div class="col-9 jumbotron text-center">
            <div class="row">
                <button class="offset-3 btn btn-primary btn-lg start" type="button" onclick="@StartMetronome"><span class="oi @buttonFace"></span></button>
                <h1 class="offset-1 display"><span class="display">@Tempo</span></h1>
            </div>
            <br />
            <div class="row">
                <h2 class="col-3">
                    <span class="timer-display">0:00</span>
                </h2>
                <h2 class="col-9">
                    <span class="exercise-display"></span>
                </h2>
            </div>
        </div>
        <div class="offset-1 col-offset2">
            <div class="metronome-object">
                <div class="pendulum-crossbar">
                    <div class="pendulum-grandparent">
                        <div class="pendulum-parent">
                            <div class="pendulum-child"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <h3 class="offset-2">Schedule:</h3>
    </div>
    <div class="row">
        <table class="table offset-2 col-7">
            <thead>
                <tr>
                    <th></th>
                    <th>Tempo</th>
                    <th>Time</th>
                    <th>Exercise</th>
                    <th></th>
                </tr>
            </thead>
            <tbody class="schedule">
                @((MarkupString)exerciseMarkup)
            </tbody>
        </table>
        <div class="row form-group offset-2 col-7">
            <label for="Rest">Rest between exercises (sec.): </label>
            <input name="Rest" class="form-control digit-filter rest" id="rest" type="text" value="@schedule.Rest"
                   style="width:3em;margin-top:0.2em;padding-left:0.3em;padding-right:0.3em;">
        </div>
        <div class="row form-group offset-2 col-7">
            <label for="StartRoutineWithRest">Start routine with a rest: </label>
            <input name="StartRoutineWithRest" class="start-with-rest" id="StartRoutineWithRest" type="checkbox" bind="@schedule.StartWithRest" />
        </div>
        <div class="row form-group offset-2 col-7">
            <label for="EndExerciseWithBell">End each exercise with a bell: </label>
            <input name="EndExerciseWithBell" class="end-with-bell" id="EndExerciseWithBell" type="checkbox" bind="@schedule.EndWithBell" />
        </div>
        <div class="row offset-2 col-7">
            <div class="form-group">
                <a href="@url" class="btn btn-primary btn-lg active" role="button" aria-pressed="true">Create Link</a>
            </div>
        </div>
        <div class="row offset-2 col-7">
            <div class="form-group">
                href="@url"
            </div>
        </div>
        <div class="row offset-2 col-7">
            <div class="form-group">
                href="@url2"
            </div>
        </div>
    </div>
    <div class="row">
        <audio class="downbeat-click" preload="auto" hidden="hidden">
            <source src="audio/downbeatClick.wav" type="audio/wav">
            <source src="audio/downbeatClick.mp3" type="audio/mp3">
        </audio>
        <audio class="end-exercise-bell" preload="auto">
            <source src="audio/EndExercise.wav" type="audio/wav">
            <source src="audio/EndExercise.mp3" type="audio/mp3">
        </audio>
        <audio class="end-routine-bell" preload="auto">
            <source src="audio/EndRoutine.wav" type="audio/wav">
            <source src="audio/EndRoutine.mp3" type="audio/mp3">
        </audio>
    </div>
</article>

@functions {
    enum TimerState { Stopped, Running, Paused };

    const int MIN_TEMPO = 20;
    const int MAX_TEMPO = 240;
    TimerState status = TimerState.Stopped;
    string buttonFace = "oi-media-play";
    string animation = "none";
    string duration = "500ms";
    bool initialized;
    Schedule schedule;
    string exerciseMarkup;
    string url;
    string url2;

    int _tempo = 120;
    int Tempo
    {
        get
        {
            return _tempo;
        }
        set
        {
            _tempo = value;
            duration = ((int)(60000.0 / _tempo)).ToString() + "ms";
            SetAnimation();
        }
    }

    bool _isRunning = false;
    bool IsRunning
    {
        get
        {
            return _isRunning;
        }
        set
        {
            _isRunning = value;
            SetAnimation();
        }
    }

    protected override void OnInit()
    {
        base.OnInit();

        Uri uri = new Uri(UriHelper.GetAbsoluteUri());
        url = uri.PathAndQuery;
        schedule = new Schedule(uri);
        url2 = schedule.ToUrl();
        exerciseMarkup = schedule.ToHtml();
        this.StateHasChanged();
    }

    protected override void OnAfterRender()
    {
        base.OnAfterRender();

        if (!initialized)
        {
            JSRuntime.Current.InvokeAsync<object>("registerListener");
            string newRow = string.Format(Schedule.HTML_TEMPLATE, 120, "2:00", string.Empty);
            JSRuntime.Current.InvokeAsync<object>("registerFormRowListener", newRow);
            initialized = true;
        }
    }

    void DecrementTempo() { Tempo = Math.Max(Tempo - 1, MIN_TEMPO); }
    void IncrementTempo() { Tempo = Math.Min(Tempo + 1, MAX_TEMPO); }

    void SetAnimation()
    {
        if (IsRunning)
        {
            if (animation == "swing0")
                animation = "swing1";
            else
                animation = "swing0";
        }
        else
        {
            animation = "none";
        }
    }

    void StartMetronome()
    {
        switch (status)
        {
            case TimerState.Stopped:
                buttonFace = "oi-media-pause";
                status = TimerState.Running;
                IsRunning = true;
                break;

            case TimerState.Paused:
                buttonFace = "oi-media-pause";
                status = TimerState.Running;
                IsRunning = true;
                break;

            case TimerState.Running:
                buttonFace = "oi-media-play";
                status = TimerState.Paused;
                IsRunning = false;
                break;

            default:
                break;
        }
    }

    public void Dispose()
    {
        //TODO: timer.Elapsed -= OnTimer;
    }

    class Schedule
    {
        private Uri uri;
        public int Rest;
        public bool StartWithRest;
        public bool EndWithBell;

        private List<Exercise> exercises = new List<Exercise>();

        public Schedule(Uri uri)
        {
            this.uri = uri;
            var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(this.uri.Query);
            this.Rest = 5;
            this.StartWithRest = true;
            this.EndWithBell = true;
            int[] tempos = null;
            TimeSpan[] durations = null;
            string[] exes = null;

            if (query.ContainsKey("r"))
            {
                foreach (var key in query.Keys)
                {
                    switch (key)
                    {
                        case "r":
                            int.TryParse(query["r"].ToString(), out this.Rest);
                            break;

                        case "s":
                            bool.TryParse(query["s"].ToString(), out this.StartWithRest);
                            break;

                        case "b":
                            bool.TryParse(query["b"].ToString(), out this.EndWithBell);
                            break;

                        case "t":
                            {
                                string[] strs = query["t"].ToString().Split('-');
                                List<int> ts = new List<int>(strs.Length);

                                foreach (string str in strs)
                                {
                                    int tempo;

                                    if (int.TryParse(str, out tempo))
                                    {
                                        ts.Add(tempo);
                                    }
                                    else
                                    {
                                        ts.Add(120);
                                    }
                                }

                                tempos = ts.ToArray();
                            }
                            break;

                        case "d":
                            {
                                string[] strs = query["d"].ToString().Split('-');
                                List<TimeSpan> durs = new List<TimeSpan>(strs.Length);

                                foreach (string str in strs)
                                {
                                    int sec;

                                    if (int.TryParse(str, out sec))
                                    {
                                        durs.Add(new TimeSpan(0, 0, sec));
                                    }
                                    else
                                    {
                                        durs.Add(new TimeSpan(0, 0, 120));
                                    }
                                }

                                durations = durs.ToArray();
                            }
                            break;

                        case "e":
                            exes = query["e"].ToString().Split('-');
                            break;
                    }
                }

                for (int i = 0; i < tempos.Length; i++)
                {
                    this.exercises.Add(new Exercise() { Tempo = tempos[i], Duration = durations[i], Description = exes[i] });
                }
            }
            else
            {
                this.exercises.Add(new Exercise() { Tempo = 120, Duration = new TimeSpan(0, 2, 0), Description = string.Empty });
            }
        }

        public string ToUrl()
        {
            // r=5&s=true&b=true&t=120-69&d=120-60&e=Analyzer%20Single%20Stroke%20Roll-lkjh
            List<int> tempos = new List<int>(exercises.Count);
            List<TimeSpan> durations = new List<TimeSpan>(exercises.Count);
            List<string> descriptions = new List<string>(exercises.Count);

            foreach (var exercise in exercises)
            {
                tempos.Add(exercise.Tempo);
                durations.Add(exercise.Duration);
                descriptions.Add(exercise.Description);
            }

            string ts = string.Join("-", tempos);
            string ds = string.Join("-", durations.Select(d => (int)d.TotalSeconds));
            string es = string.Join("-", descriptions.Select(e => Uri.EscapeUriString(e)));
            return String.Format(URL_TEMPLATE, uri.AbsolutePath,
                this.Rest,
                this.StartWithRest.ToString().ToLower(),
                this.EndWithBell.ToString().ToLower(),
                ts, ds, es);
        }

        public string ToHtml()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            foreach (var exercise in exercises)
            {
                sb.AppendLine(string.Format(HTML_TEMPLATE,
                    exercise.Tempo,
                    exercise.Duration.ToString(@"m\:ss"),
                    exercise.Description));
            }

            return sb.ToString();
        }

        const string URL_TEMPLATE = "{0}?r={1}&s={2}&b={3}&t={4}&d={5}&e={6}";

        public const string HTML_TEMPLATE = @"                        <tr>
                    <td>
                        <button type='button' class='btn btn-primary delete-form-row' style='margin-top:0.2em;margin-right:0.2em'><span class='oi oi-x'></span></button>
                    </td>
                    <td>
                        <input type='text' style='width:3em;margin-top:0.2em;margin-right:0.2em;padding-left:0.3em;padding-right:0.3em' class='form-control digit-filter tempo tempo-0' id='tempo-0' placeholder='Tempo' autocomplete='off' value='{0}' />
                    </td>
                    <td>
                        <input type='text' style='width:3.5em;margin-top:0.2em;margin-right:0.2em;padding-left:0.5em;padding-right:0.5em' class='form-control time-filter midpoint-0' id='midpoint-0' placeholder='Duration' autocomplete='off' value='{1}' />
                        <input type='hidden'class='midpoint-0-sec' />
                    </td>
                    <td>
                        <input type='text' style='margin-top:0.2em;margin-right:0.2em' class='form-control exercise' id='exercise' placeholder='Exercise' value='{2}' />
                    </td>
                    <td>
                        <button type='button' class='btn btn-primary add-form-row' style='margin-top:0.2em' onclick='@AddRow'><span class='oi oi-plus'></span></button>
                    </td>
                </tr>";
    }

    struct Exercise
    {
        public int Tempo;
        public TimeSpan Duration;
        public string Description;
    }
}
