@page "/practice/scheduled-metronome"
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

<article class="narrow-article mini-metronome" itemprop="mainContentOfPage" itemscope itemtype="http://schema.org/WebApplication">
    @*@{Html.RenderPartial("~/Views/Shared/_StructuredData.cshtml", ViewBag as object);}*@
    <meta itemprop="applicationCategory" content="Tool, Multimedia" />
    <meta itemprop="applicationSubCategory" content="Music Rehearsal" />
    <meta itemprop="operatingSystem" content="IIS/ASP.NET MVC" />
    <h2>Scheduled Metronome</h2>
    <div class="row">
        <div class="col-9 jumbotron text-center">
            <div class="row">
                <button class="offset-3 btn btn-primary btn-lg start" type="button" onclick="@schedule.OnPlayPause"><span class="oi @eggTimer.ButtonFace"></span></button>
                <h1 class="offset-1 display"><span class="display">@metronome.TempoDisplay</span></h1>
            </div>
            <br />
            <div class="row">
                <h2 class="col-3">
                    <span class="timer-display">@eggTimer.TimerDisplay</span>
                </h2>
                <h2 class="col-9">
                    <span class="exercise-display">@schedule.ExerciseDisplay</span>
                </h2>
            </div>
        </div>
        <div class="offset-1 col-offset2">
            <div class="metronome-object">
                <div class="pendulum-crossbar">
                    <div class="pendulum-grandparent">
                        <div class="pendulum-parent" data-metronome-state="@metronome.State"
                             style="animation-name: @metronome.Animation; animation-duration: @metronome.Duration; animation-play-state: @metronome.PlayState;">
                            <div class="pendulum-child" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <h3 class="offset-2">Schedule:</h3>
    </div>
    <div class="row">
        <table class="table offset-2 col-7">
            <thead>
                <tr><th></th><th>Tempo</th><th>Time</th><th>Exercise</th><th></th></tr>
            </thead>
            <tbody class="schedule">
                @((MarkupString)schedule.ExerciseMarkup)
            </tbody>
        </table>
        <div class="row form-group offset-2 col-7">
            <label for="Rest" class="col-form-label">Rest between exercises (sec.)</label>
            <div class="col-2">
                <input name="Rest" class="form-control rest" type="text" bind="@schedule.RestDisplay" />
            </div>
        </div>
        <div class="row form-group offset-2 col-7">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" bind="@schedule.StartWithRest" />
                <label class="form-check-label">Start routine with a rest</label>
            </div>
        </div>
        <div class="row form-group offset-2 col-7">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" bind="@schedule.EndWithBell" />
                <label class="form-check-label">End each exercise with a bell</label>
            </div>
        </div>
        <div class="row offset-2 col-7">
            <br />
        </div>
        <div class="row offset-2 col-7">
            <button class="btn btn-primary btn-lg active" onclick="@schedule.CreateLink">Create Link</button>
        </div>
    </div>
    <div class="row">
        <audio class="audio-click" preload="auto" hidden="hidden">
            <source src="audio/downbeatClick.wav" type="audio/wav">
            <source src="audio/downbeatClick.mp3" type="audio/mp3">
        </audio>
        <audio class="audio-end-exercise" preload="auto">
            <source src="audio/EndExercise.wav" type="audio/wav">
            <source src="audio/EndExercise.mp3" type="audio/mp3">
        </audio>
        <audio class="audio-end-routine" preload="auto">
            <source src="audio/EndRoutine.wav" type="audio/wav">
            <source src="audio/EndRoutine.mp3" type="audio/mp3">
        </audio>
    </div>
</article>

@functions {
    bool initialized;
    Schedule schedule;
    MiniMetronome metronome;
    EggTimer eggTimer;

    protected override void OnInit()
    {
        base.OnInit();

        Uri uri = new Uri(UriHelper.GetAbsoluteUri());
        schedule = new Schedule(this.StateHasChanged, uri);
        eggTimer = new EggTimer(this.StateHasChanged);
        metronome = new MiniMetronome();
        schedule.Initialize(eggTimer, metronome);
        eggTimer.Initialize(schedule.Update, schedule.LineCompleted);
        schedule.ExerciseMarkup = schedule.ToHtml();
    }

    protected override async Task OnAfterRenderAsync()
    {
        if (!initialized)
        {
            initialized = true;
            Action<string> setAnimationState = delegate (string state)
            {
                //JSRuntime.Current.InvokeAsync<object>("alert", "setAnimationState " + state);
                metronome.State = state;

                switch (state)
                {
                    case "starting":
                        metronome.Animation = state;
                        break;

                    case "running":
                        metronome.Animation = (metronome.Animation.Equals("running-lr")) ? "running-rl" : "running-lr";
                        break;

                    case "stopping":
                        metronome.Animation = (metronome.Animation.Equals("running-lr")) ? "stopping-rl" : "stopping-lr";
                        break;

                    case "stopped":
                    default:
                        metronome.Animation = "none";
                        break;
                }

                this.StateHasChanged();
            };

            try
            {
                DotNetObjectRef dotNetHelper = new DotNetObjectRef(new AnimationHelper(setAnimationState));
                await JSRuntime.Current.InvokeAsync<object>("registerScheduled", ".audio-click", dotNetHelper);
                string newRow = string.Format(Schedule.HTML_TEMPLATE, 120, "2:00", string.Empty);
                await JSRuntime.Current.InvokeAsync<object>("registerFormRowListener", newRow);
            }
            catch (Exception e)
            {
                await JSRuntime.Current.InvokeAsync<object>("alert", e.Message);
            }
        }
    }
}
