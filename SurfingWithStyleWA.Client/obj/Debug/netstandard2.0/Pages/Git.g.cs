#pragma checksum "C:\Users\PaulW\source\repos\SurfingWithStyleWA\SurfingWithStyleWA.Client\Pages\Git.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "43fbb4187ba44dbb147901ec47d698b8b21cdb7c"
// <auto-generated/>
#pragma warning disable 1591
namespace SurfingWithStyleWA.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using Microsoft.JSInterop;
    using SurfingWithStyleWA.Client;
    using SurfingWithStyleWA.Client.Shared;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/notes/git")]
    public class Git : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
            base.BuildRenderTree(builder);
            builder.OpenElement(0, "h1");
            builder.AddContent(1, "Git");
            builder.CloseElement();
            builder.AddContent(2, "\n\n");
            builder.OpenElement(3, "pre");
            builder.AddContent(4, "\n\nhttps://git-scm.com/\n\n# sets up Git with your name\ngit config --global user.name \"<Your-Full-Name>\"\n\n# sets up Git with your email\ngit config --global user.email \"<your-email-address>\"\n\n# makes sure that Git output is colored\ngit config --global color.ui auto\n\n# displays the original state in a conflict\ngit config --global merge.conflictstyle diff3\n\ngit config --global core.editor (\"vim\"|\"code --wait\")\n\ngit config --list\n\ngit init\n\ngit clone <URL> [target-name]\n\ngit status\n\ngit log [--oneline|--stat|-p] [SHA]\n\n# show log of all branches\ngit log --oneline --graph --all\n\ngit show <SHA>\n\ngit add (.|<file>)\n\ngit rm --cached <file>\n\ngit commit [-m \"<message>\"]\n\ngit diff\n\nThe .gitignore file is used to tell Git about the files that Git should not track.\n\ngit tag -a <tag> [<SHA>]\n\n# list branches\ngit branch\n\n# create branch\ngit branch <branch>\n\n# delete branch\ngit branch <branch> (-d|-D)\n\ngit checkout <branch>\n\n# create and checkout branch\ngit checkout -b <branch>\n\ngit merge <name-of-branch-to-merge-in>\n\nA Fast-forward merge will just move the currently checked out branch forward until it points to the same commit that the other branch is pointing to.\n\n# alter the most recent commit\ngit commit --amend\n\ngit revert <SHA-of-commit-to-revert>\n\nHere\'s how we can refer to previous commits:\nthe parent commit – the following indicate the parent commit of the current commit\nHEAD^\nHEAD~\nHEAD~1\nthe grandparent commit – the following indicate the grandparent commit of the current commit\nHEAD^^\nHEAD~2 \nthe great-grandparent commit – the following indicate the great-grandparent commit of the current commit\nHEAD^^^\nHEAD~3\n\n# delete a commit\ngit reset <reference-to-commit>\n\n# show full path to the remote repository\ngit remote -v\n\n# add a connection to a new remote repository\ngit remote add origin https://github.com/PaulNWms/<repo-name>.git\n\ngit push origin master\n\n# fetch and merge\ngit pull origin master\n\n# fetch without merging\ngit fetch origin master\n\ngit merge origin/master\n\nForking a repository creates an identical copy of the original repository and moves this copy to your GitHub account.\n\n# show contributors\ngit shortlog\n\n# sort by activity\ngit shortlog -s -n\n\n# show commits by author\ngit log --author=\"<name>\"\n\ngit log --grep=\"\"<regex>\"\n\nCONTRIBUTING.md\n\n# add a connection to a project\'s main repository (not your fork)\ngit remote add upstream https://github.com/\n\n# in case you don\'t like working with \'origin\' and \'upstream\'\ngit remote rename <name> <new-name>\n\n# bring project\'s main repository changes into our local branch\ngit fetch upstream master\n\nTo get commits from a source repository into your forked repository on GitHub you need to:\n- get the cloneable URL of the source repository\n- create a new remote with the git remote add command \n-- use the shortname upstream to point to the source repository\n-- provide the URL of the source repository\n- fetch the new upstream remote\n- merge the upstream\'s branch into a local branch\n- push the newly updated local branch to your origin repo\n\n# squash 3 commits together\n# create a backup branch before git rebase\ngit rebase -i HEAD~3\n\n# then the change will have to be force pushed to your fork\ngit push -f origin <branch>\n\nLinks:\nhttp://up-for-grabs.net/\nhttp://www.firsttimersonly.com/\nfirst-timers-only label on GitHub https://github.com/search?utf8=%E2%9C%93&q=label%3Afirst-timers-only+is%3Aopen&type=Issues&ref=searchresults\n\"first timers only\" blog post https://blog.kentcdodds.com/first-timers-only-78281ea47455\ntry tackling some Git and GitHub challenges with the Git-it app https://github.com/jlord/git-it-electron\nhttp://firstpr.me/\n\n");
            builder.CloseElement();
        }
        #pragma warning restore 1998
    }
}
#pragma warning restore 1591
